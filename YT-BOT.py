import os
import asyncio
import aiohttp
import signal
import sys
import platform
from datetime import datetime, timezone
from dotenv import load_dotenv
from googleapiclient.discovery import build
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from io import BytesIO
from telegram_config import TelegramConfig  # –ò–º–ø–æ—Ä—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ telegram_config.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class YouTubeTelegramBot:
    def __init__(self):
        self.youtube = build('youtube', 'v3', developerKey=os.getenv('YOUTUBE_API_KEY'))
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.bot = Bot(token=self.bot_token)
        self.admin_users = [int(uid) for uid in str(os.getenv('ADMIN_USERS', '')).split(',') if uid]
        self.config = TelegramConfig()
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '300'))
        self.running = False
        self.last_check = {}
        self.shutdown_event = asyncio.Event()
        self.channel_cache = {}

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_users

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start_notify"""
        user_id = update.effective_user.id
        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–æ—Ç!\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/help_notify - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
            f"/add_telegram_notify - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"/remove_notify - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"/list_notify - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã, –ø–æ–ª—É—á–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–º!",
            parse_mode=ParseMode.HTML
        )

    # ------------------------------------------------------------------------------------#
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help_notify"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        help_text = (
            "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ YouTube –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –ë–æ—Ç—É</b>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üîî <b>–ö–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
            "/add_telegram_notify - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/remove_notify - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/list_notify - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã, –ø–æ–ª—É—á–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "üì∫ <b>–ö–æ–º–∞–Ω–¥—ã YouTube –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "/add_youtube_channel - –î–æ–±–∞–≤–∏—Ç—å YouTube –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "/remove_youtube_channel - –£–¥–∞–ª–∏—Ç—å YouTube –∫–∞–Ω–∞–ª\n"
            "/list_youtube_channels - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã\n\n"
            "‚ùì <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start_notify - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help_notify - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
            "/how_notify - –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n"
            "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /how_notify"
        )

        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML
        )

    async def cmd_how(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /how_notify"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
                parse_mode=ParseMode.HTML
            )
            return

        setup_text = (
            "üöÄ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞</b>\n\n"
            "<b>1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_telegram_notify –≤ —á–∞—Ç–µ\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å –ø–æ–º–æ—â—å—é /list_notify\n\n"
            "<b>2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ YouTube –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ ID YouTube –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_youtube_channel [channel_name] [channel_id]\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: /add_youtube_channel PewDiePie UC-lHJZR3Gqxm24_Vd_AJ5Yw\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å –ø–æ–º–æ—â—å—é /list_youtube_channels\n\n"
            "<b>3. –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞:</b>\n"
            "‚Ä¢ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            "<b>4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã: /remove_youtube_channel [channel_id]\n"
            "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /remove_notify\n"
            "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /list_notify –∏ /list_youtube_channels\n\n"
            "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help_notify"
        )

        await update.message.reply_text(
            setup_text,
            parse_mode=ParseMode.HTML
        )

    # ------------------------------------------------------------------------------------#

    async def cmd_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add_telegram_notify"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        try:
            chat = await self.bot.get_chat(chat_id)
            chat_title = chat.title or str(chat_id)

            if self.config.add_chat(chat_id, chat_title, chat_type):
                await update.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n"
                    f"–ß–∞—Ç: <b>{chat_title}</b>\n"
                    f"–¢–∏–ø: {chat_type}\n"
                    f"ID: <code>{chat_id}</code>\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ /list_notify, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                    f"–ß–∞—Ç: <b>{chat_title}</b>\n"
                    f"ID: <code>{chat_id}</code>",
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}",
                parse_mode=ParseMode.HTML
            )

    async def cmd_remove(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /remove_notify"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        try:
            chat = await self.bot.get_chat(chat_id)
            chat_title = chat.title or str(chat_id)

            if self.config.remove_chat(chat_id):
                await update.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n"
                    f"–ß–∞—Ç: <b>{chat_title}</b>\n"
                    f"ID: <code>{chat_id}</code>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_telegram_notify, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n"
                    f"–ß–∞—Ç: <b>{chat_title}</b>\n"
                    f"ID: <code>{chat_id}</code>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_telegram_notify, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}",
                parse_mode=ParseMode.HTML
            )

    async def cmd_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list_notify"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        try:
            chats = self.config.get_chats()

            if not chats:
                await update.message.reply_text(
                    "üìù –ù–µ—Ç —á–∞—Ç–æ–≤, –ø–æ–ª—É—á–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_telegram_notify –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.",
                    parse_mode=ParseMode.HTML
                )
                return

            chat_list = []
            for chat in chats:
                chat_id = chat['id']
                try:
                    chat_info = await self.bot.get_chat(chat_id)
                    chat_title = chat_info.title or str(chat_id)
                    chat_type = chat_info.type
                    chat_list.append(
                        f"‚Ä¢ <b>{chat_title}</b>\n"
                        f"  –¢–∏–ø: {chat_type}\n"
                        f"  ID: <code>{chat_id}</code>\n"
                        f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat.get('added_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                except Exception:
                    chat_list.append(
                        f"‚Ä¢ ID: <code>{chat_id}</code>\n"
                        f"  –¢–∏–ø: {chat.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat.get('added_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"  (–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ)"
                    )

            message = "üìù <b>–ß–∞—Ç—ã, –ø–æ–ª—É—á–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n" + "\n\n".join(chat_list)

            if len(message) > 4096:
                chunks = [message[i:i + 4096] for i in range(0, len(message), 4096)]
                for chunk in chunks:
                    await update.message.reply_text(
                        chunk,
                        parse_mode=ParseMode.HTML
                    )
            else:
                await update.message.reply_text(
                    message,
                    parse_mode=ParseMode.HTML
                )

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤: {str(e)}",
                parse_mode=ParseMode.HTML
            )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ Telegram"""
        print(f'–û—à–∏–±–∫–∞ Telegram: {context.error}')

    # ------------------------------------------------------------------------------------#
    async def cmd_add_youtube_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add_youtube_channel"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_youtube_channel <channel_name> <channel_id>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /add_youtube_channel PewDiePie UC-lHJZR3Gqxm24_Vd_AJ5Yw",
                parse_mode=ParseMode.HTML
            )
            return

        channel_name = context.args[0]
        channel_id = context.args[1]

        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –Ω–∞ YouTube –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            response = self.youtube.channels().list(
                part="snippet",
                id=channel_id
            ).execute()

            if not response.get('items'):
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ YouTube –∫–∞–Ω–∞–ª —Å ID: {channel_id}\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞.",
                    parse_mode=ParseMode.HTML
                )
                return

            # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ —Å YouTube, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            actual_name = response['items'][0]['snippet']['title']

            if self.config.add_youtube_channel(actual_name, channel_id):
                await update.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω YouTube –∫–∞–Ω–∞–ª!\n\n"
                    f"–ö–∞–Ω–∞–ª: <b>{actual_name}</b>\n"
                    f"ID: <code>{channel_id}</code>",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                    f"–ö–∞–Ω–∞–ª: <b>{actual_name}</b>\n"
                    f"ID: <code>{channel_id}</code>",
                    parse_mode=ParseMode.HTML
                )

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}",
                parse_mode=ParseMode.HTML
            )

    async def cmd_remove_youtube_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /remove_youtube_channel"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        if not context.args:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_youtube_channel <channel_id>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_youtube_channels, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ ID –∫–∞–Ω–∞–ª–æ–≤",
                parse_mode=ParseMode.HTML
            )
            return

        channel_id = context.args[0]
        channel = self.config.get_youtube_channel(channel_id)

        if self.config.remove_youtube_channel(channel_id):
            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω YouTube –∫–∞–Ω–∞–ª!\n\n"
                f"–ö–∞–Ω–∞–ª: <b>{channel['name']}</b>\n"
                f"ID: <code>{channel_id}</code>",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ö–∞–Ω–∞–ª —Å ID <code>{channel_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_youtube_channels, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã.",
                parse_mode=ParseMode.HTML
            )

    async def cmd_list_youtube_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /list_youtube_channels"""
        user_id = update.effective_user.id

        if not self.is_admin(user_id):
            await update.message.reply_text(
                "‚õîÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                parse_mode=ParseMode.HTML
            )
            return

        channels = self.config.get_youtube_channels()

        if not channels:
            await update.message.reply_text(
                "üìù –ù–µ—Ç YouTube –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_youtube_channel, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.",
                parse_mode=ParseMode.HTML
            )
            return

        channel_list = []
        for channel in channels:
            channel_list.append(
                f"‚Ä¢ <b>{channel['name']}</b>\n"
                f"  ID: <code>{channel['id']}</code>"
            )

        message = "üìù <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ YouTube –ö–∞–Ω–∞–ª–æ–≤:</b>\n\n" + "\n\n".join(channel_list)

        await update.message.reply_text(
            message,
            parse_mode=ParseMode.HTML
        )

    # ----------------------------------------------------------------------------------#

    async def get_channel_id(self, channel_data):
        """–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_id = channel_data['id'].strip()
            channel_name = channel_data['name']

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à
            if channel_id in self.channel_cache:
                return self.channel_cache[channel_id]

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –∫–∞–Ω–∞–ª–∞
            response = self.youtube.channels().list(
                part="id,snippet",
                id=channel_id
            ).execute()

            if response.get('items'):
                self.channel_cache[channel_id] = channel_id
                print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∫–∞–Ω–∞–ª: {channel_name} ({channel_id})")
                return channel_id

            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ {channel_id} –¥–ª—è {channel_name}")
            return None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {str(e)}")
            return None

    async def check_channel(self, session, channel_data):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å YouTube –∫–∞–Ω–∞–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫"""
        try:
            channel_id = await self.get_channel_id(channel_data)
            if not channel_id:
                print(f"–ü—Ä–æ–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞ {channel_data['name']} - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ID {channel_data['id']}")
                return

            # –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check_time = self.last_check.get(channel_id, datetime.now(timezone.utc).replace(
                hour=0, minute=0, second=0, microsecond=0
            )).isoformat()

            activities = self.youtube.activities().list(
                part="contentDetails,snippet",
                channelId=channel_id,
                publishedAfter=last_check_time,
                maxResults=5
            ).execute()

            videos_to_process = []
            for item in activities.get('items', []):
                if 'upload' not in item.get('contentDetails', {}):
                    continue

                video_id = item['contentDetails']['upload']['videoId']
                video = self.youtube.videos().list(
                    part="snippet,statistics,contentDetails",
                    id=video_id
                ).execute()['items'][0]

                upload_date = datetime.fromisoformat(video['snippet']['publishedAt'].replace('Z', '+00:00'))
                videos_to_process.append((upload_date, video))

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
            videos_to_process.sort(key=lambda x: x[0], reverse=True)

            for upload_date, video in videos_to_process:
                await self.process_video(session, video)

            # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_check[channel_id] = datetime.now(timezone.utc)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel_data['name']}: {str(e)}")
            await asyncio.sleep(5)

    async def process_video(self, session, video):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.shutdown_event.is_set():
            return

        video_id = video['id']
        thumbnail_url = (
                video['snippet']['thumbnails'].get('maxres') or
                video['snippet']['thumbnails'].get('high') or
                video['snippet']['thumbnails']['default']
        )['url']

        async with session.get(thumbnail_url) as response:
            if response.status != 200:
                return
            thumbnail_data = await response.read()

        duration = video['contentDetails']['duration'].replace('PT', '').lower()
        duration = duration.replace('h', ':').replace('m', ':').replace('s', '')

        upload_date = datetime.fromisoformat(video['snippet']['publishedAt'].replace('Z', '+00:00'))
        formatted_date = upload_date.strftime('%Y-%m-%d %H:%M UTC')

        caption = (
            f"üî•<b>–ù–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–ú–û–¢–†–ò–¢–ï –°–ï–ô–ß–ê–°</b>üî•\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üé¨ <b><a href='https://youtube.com/watch?v={video_id}'>{video['snippet']['title']}</a></b>\n"
            f"üì∫ <b><a href='https://youtube.com/channel/{video['snippet']['channelId']}?sub_confirmation=1'>{video['snippet']['channelTitle']}</a></b>\n"
            f"üìÖ {formatted_date}\n"
            f"#–ù–æ–≤–æ–µ–í–∏–¥–µ–æ #{video['snippet']['channelTitle'].replace(' ', '')}"
        )

        await self.send_notifications(thumbnail_data, caption)

    async def send_notifications(self, thumbnail_data, caption):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Telegram —á–∞—Ç—ã"""
        chat_ids = self.config.get_telegram_chats()
        total_chats = len(chat_ids)

        batch_size = 3
        for i in range(0, total_chats, batch_size):
            if self.shutdown_event.is_set():
                return

            batch = chat_ids[i:i + batch_size]
            for chat_id in batch:
                await self.send_notification_to_chat(chat_id, thumbnail_data, caption)

            if i + batch_size < total_chats:
                await asyncio.sleep(3)

    async def send_notification_to_chat(self, chat_id, thumbnail_data, caption):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω —á–∞—Ç"""
        try:
            await self.bot.send_photo(
                chat_id=chat_id,
                photo=BytesIO(thumbnail_data),
                caption=caption,
                parse_mode=ParseMode.HTML,
                read_timeout=30,
                write_timeout=30,
                connect_timeout=30,
                pool_timeout=30
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
            await asyncio.sleep(2)

        except Exception as e:
            error_message = str(e).lower()
            if "chat not found" in error_message or "bot was blocked" in error_message:
                print(f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω): {str(e)}")
                self.config.remove_telegram_chat(chat_id)
                return

            if "timeout" in error_message or "connection" in error_message:
                print(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: {str(e)}")
                await asyncio.sleep(5)
                try:
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=BytesIO(thumbnail_data),
                        caption=caption,
                        parse_mode=ParseMode.HTML,
                        read_timeout=30,
                        write_timeout=30,
                        connect_timeout=30,
                        pool_timeout=30
                    )
                    print(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å–ø–µ—à–Ω–∞")
                except Exception as retry_e:
                    print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(retry_e)}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {str(e)}")

    async def monitor_channels(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        while not self.shutdown_event.is_set():
            try:
                channels = self.config.get_youtube_channels()
                print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ {datetime.now()}")
                print("–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", ", ".join(c['name'] for c in channels))

                conn = aiohttp.TCPConnector(limit=5, force_close=True)
                timeout = aiohttp.ClientTimeout(total=60)

                async with aiohttp.ClientSession(connector=conn, timeout=timeout) as session:
                    tasks = []
                    for channel_data in channels:
                        if self.shutdown_event.is_set():
                            break
                        task = asyncio.create_task(self.check_channel(session, channel_data))
                        tasks.append(task)
                        await asyncio.sleep(2)

                    if tasks:
                        await asyncio.gather(*tasks, return_exceptions=True)

                if self.shutdown_event.is_set():
                    break

                print("\n–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                try:
                    await asyncio.wait_for(
                        self.shutdown_event.wait(),
                        timeout=self.check_interval
                    )
                except asyncio.TimeoutError:
                    pass

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
                await asyncio.sleep(30)

        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        self.running = False

    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ Telegram –±–æ—Ç–∞"""
        application = Application.builder().token(self.bot_token).build()

        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start_notify', self.cmd_start))
        application.add_handler(CommandHandler('help_notify', self.cmd_help))
        application.add_handler(CommandHandler('how_notify', self.cmd_how))
        application.add_handler(CommandHandler('add_telegram_notify', self.cmd_add))
        application.add_handler(CommandHandler('remove_notify', self.cmd_remove))
        application.add_handler(CommandHandler('list_notify', self.cmd_list))

        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è YouTube –∫–∞–Ω–∞–ª–∞–º–∏
        application.add_handler(CommandHandler('add_youtube_channel', self.cmd_add_youtube_channel))
        application.add_handler(CommandHandler('remove_youtube_channel', self.cmd_remove_youtube_channel))
        application.add_handler(CommandHandler('list_youtube_channels', self.cmd_list_youtube_channels))

        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        async with application:
            await application.initialize()
            await application.start()
            await application.updater.start_polling()

            monitor_task = asyncio.create_task(self.monitor_channels())

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            if platform.system() != 'Windows':
                loop = asyncio.get_running_loop()
                for sig in (signal.SIGTERM, signal.SIGINT):
                    loop.add_signal_handler(
                        sig,
                        lambda s=sig: asyncio.create_task(self.handle_shutdown(application, monitor_task, s))
                    )
            else:
                for sig in (signal.SIGTERM, signal.SIGINT):
                    signal.signal(
                        sig,
                        lambda s, f, app=application, task=monitor_task:
                        asyncio.create_task(self.handle_shutdown(app, task, s))
                    )

            try:
                await monitor_task
            except asyncio.CancelledError:
                pass

    async def handle_shutdown(self, application, monitor_task, sig):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}")
        self.shutdown_event.set()
        monitor_task.cancel()
        await application.stop()
        await application.shutdown()
        sys.exit(0)


async def main():
    bot = YouTubeTelegramBot()
    bot.config.list_all()
    await bot.run()


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ YouTube –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ Telegram –ë–æ—Ç–∞...")
    asyncio.run(main())
